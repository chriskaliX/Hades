package support

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Data) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0004) {
		(*z) = (*z)[:zb0004]
	} else {
		(*z) = make(Data, zb0004)
	}
	for zb0001 := range *z {
		var zb0005 uint32
		zb0005, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if (*z)[zb0001] == nil {
			(*z)[zb0001] = make(map[string]string, zb0005)
		} else if len((*z)[zb0001]) > 0 {
			for key := range (*z)[zb0001] {
				delete((*z)[zb0001], key)
			}
		}
		for zb0005 > 0 {
			zb0005--
			var zb0002 string
			var zb0003 string
			zb0002, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0003, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0002)
				return
			}
			(*z)[zb0001][zb0002] = zb0003
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Data) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0006 := range z {
		err = en.WriteMapHeader(uint32(len(z[zb0006])))
		if err != nil {
			err = msgp.WrapError(err, zb0006)
			return
		}
		for zb0007, zb0008 := range z[zb0006] {
			err = en.WriteString(zb0007)
			if err != nil {
				err = msgp.WrapError(err, zb0006)
				return
			}
			err = en.WriteString(zb0008)
			if err != nil {
				err = msgp.WrapError(err, zb0006, zb0007)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Data) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0006 := range z {
		o = msgp.AppendMapHeader(o, uint32(len(z[zb0006])))
		for zb0007, zb0008 := range z[zb0006] {
			o = msgp.AppendString(o, zb0007)
			o = msgp.AppendString(o, zb0008)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Data) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0004) {
		(*z) = (*z)[:zb0004]
	} else {
		(*z) = make(Data, zb0004)
	}
	for zb0001 := range *z {
		var zb0005 uint32
		zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if (*z)[zb0001] == nil {
			(*z)[zb0001] = make(map[string]string, zb0005)
		} else if len((*z)[zb0001]) > 0 {
			for key := range (*z)[zb0001] {
				delete((*z)[zb0001], key)
			}
		}
		for zb0005 > 0 {
			var zb0002 string
			var zb0003 string
			zb0005--
			zb0002, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			zb0003, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0002)
				return
			}
			(*z)[zb0001][zb0002] = zb0003
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Data) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0006 := range z {
		s += msgp.MapHeaderSize
		if z[zb0006] != nil {
			for zb0007, zb0008 := range z[zb0006] {
				_ = zb0008
				s += msgp.StringPrefixSize + len(zb0007) + msgp.StringPrefixSize + len(zb0008)
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RegistRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pid":
			z.Pid, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Pid")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "version":
			z.Version, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RegistRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "pid"
	err = en.Append(0x83, 0xa3, 0x70, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Pid)
	if err != nil {
		err = msgp.WrapError(err, "Pid")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "version"
	err = en.Append(0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RegistRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "pid"
	o = append(o, 0x83, 0xa3, 0x70, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.Pid)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "version"
	o = append(o, 0xa7, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Version)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RegistRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "pid":
			z.Pid, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pid")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "version":
			z.Version, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RegistRequest) Msgsize() (s int) {
	s = 1 + 4 + msgp.Uint32Size + 5 + msgp.StringPrefixSize + len(z.Name) + 8 + msgp.StringPrefixSize + len(z.Version)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Task) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "content":
			z.Content, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "token":
			z.Token, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Token")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Task) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "id"
	err = en.Append(0x83, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "content"
	err = en.Append(0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// write "token"
	err = en.Append(0xa5, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Token)
	if err != nil {
		err = msgp.WrapError(err, "Token")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Task) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "id"
	o = append(o, 0x83, 0xa2, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.ID)
	// string "content"
	o = append(o, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Content)
	// string "token"
	o = append(o, 0xa5, 0x74, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendString(o, z.Token)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Task) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "content":
			z.Content, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "token":
			z.Token, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Token")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Task) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint32Size + 8 + msgp.StringPrefixSize + len(z.Content) + 6 + msgp.StringPrefixSize + len(z.Token)
	return
}
