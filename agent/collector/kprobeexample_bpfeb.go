// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package collector

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadKProbeExample returns the embedded CollectionSpec for KProbeExample.
func LoadKProbeExample() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KProbeExampleBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load KProbeExample: %w", err)
	}

	return spec, err
}

// LoadKProbeExampleObjects loads KProbeExample and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *KProbeExampleObjects
//     *KProbeExamplePrograms
//     *KProbeExampleMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKProbeExampleObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadKProbeExample()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// KProbeExampleSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KProbeExampleSpecs struct {
	KProbeExampleProgramSpecs
	KProbeExampleMapSpecs
}

// KProbeExampleSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KProbeExampleProgramSpecs struct {
	BpfSysExecve *ebpf.ProgramSpec `ebpf:"bpf_sys_execve"`
}

// KProbeExampleMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KProbeExampleMapSpecs struct {
	ExecveEvents *ebpf.MapSpec `ebpf:"execve_events"`
}

// KProbeExampleObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKProbeExampleObjects or ebpf.CollectionSpec.LoadAndAssign.
type KProbeExampleObjects struct {
	KProbeExamplePrograms
	KProbeExampleMaps
}

func (o *KProbeExampleObjects) Close() error {
	return _KProbeExampleClose(
		&o.KProbeExamplePrograms,
		&o.KProbeExampleMaps,
	)
}

// KProbeExampleMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKProbeExampleObjects or ebpf.CollectionSpec.LoadAndAssign.
type KProbeExampleMaps struct {
	ExecveEvents *ebpf.Map `ebpf:"execve_events"`
}

func (m *KProbeExampleMaps) Close() error {
	return _KProbeExampleClose(
		m.ExecveEvents,
	)
}

// KProbeExamplePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKProbeExampleObjects or ebpf.CollectionSpec.LoadAndAssign.
type KProbeExamplePrograms struct {
	BpfSysExecve *ebpf.Program `ebpf:"bpf_sys_execve"`
}

func (p *KProbeExamplePrograms) Close() error {
	return _KProbeExampleClose(
		p.BpfSysExecve,
	)
}

func _KProbeExampleClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed kprobeexample_bpfeb.o
var _KProbeExampleBytes []byte
